// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app;

  app = angular.module('kuew');

  app.directive('multiStepInput', function(templatePath) {
    return {
      restrict: 'EA',
      transclude: true,
      replace: true,
      controller: 'MultiStepInputController',
      templateUrl: templatePath('components/multi-step-input.html'),
      require: '^?ngModel',
      scope: {
        ngModel: '='
      },
      link: function($scope, element, attrs) {
        return $scope.el = function() {
          return element;
        };
      }
    };
  });

  app.controller('MultiStepInputController', function($scope, _, $timeout) {
    var focusElement, indexForModel;
    $scope.layout = [];
    $scope.maxShown = 1;
    $scope.$watch('maxShown', function() {
      return focusElement($scope.maxShown - 1);
    });
    indexForModel = function(model) {
      return _.findIndex($scope.layout, function(l) {
        return l.model === model;
      });
    };
    focusElement = function(i) {
      return $timeout(function() {
        return $scope.el().find('ul li:nth-child(' + i + ') .focusable').focus();
      }, 200);
    };
    this.updateList = function() {
      var i;
      i = _.findIndex($scope.layout, function(l) {
        return !l.model.isValid;
      });
      if (i < 0) {
        return $scope.maxShown = $scope.layout.length;
      } else {
        return $scope.maxShown = i + 1;
      }
    };
    this.pushLayout = function(layoutItem) {
      if ($scope.layout.indexOf(layoutItem) === -1) {
        return $scope.layout.push(layoutItem);
      }
    };
    this.showAtLeast = function(model) {
      return this.updateList();
    };
    return this.hideUpTo = function(model) {
      var i, j, _i, _ref;
      i = indexForModel(model);
      for (j = _i = i, _ref = $scope.layout.length - 1; i <= _ref ? _i <= _ref : _i >= _ref; j = i <= _ref ? ++_i : --_i) {
        $scope.layout[j].model.reset();
      }
      return this.updateList();
    };
  });

}).call(this);
