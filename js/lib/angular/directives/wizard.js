// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app;

  app = angular.module('kuew');

  app.controller('WizardController', function($scope) {
    $scope.steps = [];
    $scope.currentStep = 0;
    this.pushStep = function(element) {
      $scope.steps.push(element);
      return $scope.steps.length - 1;
    };
    this.getCurrentStep = function() {
      return $scope.currentStep;
    };
    return this.getSteps = function() {
      return $scope.steps;
    };
  });

  app.controller('WizardStepController', function($scope) {});

  app.directive('wizard', function(templatePath) {
    return {
      transclude: true,
      replace: true,
      templateUrl: templatePath('components/wizard/container.html'),
      restrict: 'EA',
      controller: 'WizardController',
      scope: {
        wizardId: '@id',
        transitions: '='
      },
      link: function($scope, element, attrs) {
        return element.wizard({
          afterBackward: function() {
            return $scope.currentStep--;
          },
          afterForward: function() {
            return $scope.currentStep++;
          },
          transitions: $scope.transitions
        });
      }
    };
  });

  app.directive('step', function(templatePath, $log, $timeout) {
    return {
      require: '^wizard',
      restrict: 'EA',
      transclude: true,
      replace: true,
      templateUrl: templatePath('components/wizard/step.html'),
      controller: 'WizardStepController',
      scope: {
        heading: '@'
      },
      link: function($scope, element, attrs, controller) {
        $scope.stepIndex = controller.pushStep(element);
        $scope.showNavigation = $scope.$eval(attrs.showNavigation) !== false;
        $scope.isCurrent = function() {
          return controller.getCurrentStep() === $scope.stepIndex;
        };
        $scope.isLast = function() {
          return $scope.stepIndex === controller.getSteps().length - 1;
        };
        $scope.isFirst = function() {
          return $scope.stepIndex === 0;
        };
        if ($scope.showNavigation) {
          return $timeout(function() {
            return element.find('.livicon').each(function() {
              return angular.element(this).addLivicon();
            });
          }, 100);
        }
      }
    };
  });

  app.directive('branch', function() {
    return {
      restrict: 'EA',
      require: '^wizard',
      transclude: true,
      replace: true,
      template: '<div class="branch" ng-transclude></div>',
      link: function($scope, element, attrs) {}
    };
  });

}).call(this);
